import Animated from "react-native-reanimated";
declare type Fn = (...args: Animated.Adaptable<number>[]) => Animated.Node<number>;
declare type Adaptable = Vector | Animated.Adaptable<number>;
export interface Vector<T extends Animated.Adaptable<number> = Animated.Adaptable<number>> {
    x: T;
    y: T;
}
export declare const vec: {
    create: <T extends Animated.Adaptable<number>>(x: T, y?: T | undefined) => {
        x: T;
        y: T;
    };
    createValue: (x: number, y?: number | undefined) => {
        x: Animated.Value<number>;
        y: Animated.Value<number>;
    };
    invert: (a: Vector<Animated.Adaptable<number>>) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    add: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    sub: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    dot: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    div: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    multiply: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    divide: (vectors_0: Adaptable, vectors_1: Adaptable, ...vectors_2: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    set: (a: Vector<Animated.Value<number>>, b: Adaptable) => Animated.Node<number>;
    clamp: (value: Vector<Animated.Adaptable<number>>, minVec: Vector<Animated.Adaptable<number>>, maxVec: Vector<Animated.Adaptable<number>>) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    apply: (fn: Fn, ...vectors: Adaptable[]) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    min: (vector: Vector<Animated.Adaptable<number>>, value: Animated.Adaptable<number>) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
    max: (vector: Vector<Animated.Adaptable<number>>, value: Animated.Adaptable<number>) => {
        x: Animated.Node<number>;
        y: Animated.Node<number>;
    };
};
export {};
