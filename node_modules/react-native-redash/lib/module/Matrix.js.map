{"version":3,"sources":["Matrix.ts"],"names":["Animated","and","add","cond","eq","multiply","sqrt","cos","sin","sub","lessThan","divide","greaterOrEq","atan","pow","exhaustiveCheck","a","Error","identityMatrix","translateXMatrix","x","translateYMatrix","y","scaleMatrix","s","scaleXMatrix","scaleYMatrix","rotateZMatrix","r","multiplyRowByCol","row","col","multiply4","m1","m2","col0","col1","col2","col3","accumulatedTransform","transforms","matrix","reduce","acc","transform","key","Object","keys","value","row0x","row0y","row1x","row1y","translateX","translateY","scaleXAbs","scaleYAbs","determinant","scaleX","scaleY","row0y1","row0x1","rotateZ","scale","rotate"],"mappings":"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","sourcesContent":["import Animated from \"react-native-reanimated\";\n\nconst {\n  and,\n  add,\n  cond,\n  eq,\n  multiply,\n  sqrt,\n  cos,\n  sin,\n  sub,\n  lessThan,\n  divide,\n  greaterOrEq,\n  atan,\n  pow,\n} = Animated;\n\ntype Column4 = readonly [\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>,\n  Animated.Adaptable<number>\n];\n\ntype Row4 = Column4;\ntype Matrix4 = [Column4, Column4, Column4, Column4];\n\ntype TransformName =\n  | \"translateX\"\n  | \"translateY\"\n  | \"scale\"\n  | \"scaleX\"\n  | \"scaleY\"\n  | \"rotateZ\"\n  | \"rotate\";\ntype Transformations = { [Name in TransformName]: Animated.Adaptable<number> };\nexport type Transforms = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"rotateZ\">\n  | Pick<Transformations, \"rotate\">\n)[];\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix4 = [\n  [1, 0, 0, 0],\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst translateXMatrix = (x: Animated.Adaptable<number>): Matrix4 => [\n  [1, 0, 0, x],\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst translateYMatrix = (y: Animated.Adaptable<number>): Matrix4 => [\n  [1, 0, 0, 0],\n  [0, 1, 0, y],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst scaleMatrix = (s: Animated.Adaptable<number>): Matrix4 => [\n  [s, 0, 0, 0],\n  [0, s, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst scaleXMatrix = (s: Animated.Adaptable<number>): Matrix4 => [\n  [s, 0, 0, 0],\n  [0, 1, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst scaleYMatrix = (s: Animated.Adaptable<number>): Matrix4 => [\n  [1, 0, 0, 0],\n  [0, s, 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\n/*\nconst rotateXMatrix = (r: Animated.Adaptable<number>): Matrix4 => [\n  [1, 0, 0, 0],\n  [0, cos(r), multiply(-1, sin(r)), 0],\n  [0, sin(r), cos(r), 0],\n  [0, 0, 0, 1],\n];\n\nconst rotateYMatrix = (r: Animated.Adaptable<number>): Matrix4 => [\n  [cos(r), 0, sin(r), 0],\n  [0, 1, 0, 0],\n  [multiply(-1, sin(r)), 0, cos(r), 0],\n  [0, 0, 0, 1],\n];\n*/\n\nconst rotateZMatrix = (r: Animated.Adaptable<number>): Matrix4 => [\n  [cos(r), multiply(-1, sin(r)), 0, 0],\n  [sin(r), cos(r), 0, 0],\n  [0, 0, 1, 0],\n  [0, 0, 0, 1],\n];\n\nconst multiplyRowByCol = (\n  row: Row4,\n  col: Column4\n): Animated.Adaptable<number> => {\n  return add(\n    multiply(row[0], col[0]),\n    multiply(row[1], col[1]),\n    multiply(row[2], col[2]),\n    multiply(row[3], col[3])\n  );\n};\n\nconst multiply4 = (m1: Matrix4, m2: Matrix4): Matrix4 => {\n  const col0 = [m2[0][0], m2[1][0], m2[2][0], m2[3][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1], m2[3][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2], m2[3][2]] as const;\n  const col3 = [m2[0][3], m2[1][3], m2[2][3], m2[3][3]] as const;\n  return [\n    [\n      multiplyRowByCol(m1[0], col0),\n      multiplyRowByCol(m1[0], col1),\n      multiplyRowByCol(m1[0], col2),\n      multiplyRowByCol(m1[0], col3),\n    ],\n    [\n      multiplyRowByCol(m1[1], col0),\n      multiplyRowByCol(m1[1], col1),\n      multiplyRowByCol(m1[1], col2),\n      multiplyRowByCol(m1[1], col3),\n    ],\n    [\n      multiplyRowByCol(m1[2], col0),\n      multiplyRowByCol(m1[2], col1),\n      multiplyRowByCol(m1[2], col2),\n      multiplyRowByCol(m1[2], col3),\n    ],\n    [\n      multiplyRowByCol(m1[3], col0),\n      multiplyRowByCol(m1[3], col1),\n      multiplyRowByCol(m1[3], col2),\n      multiplyRowByCol(m1[3], col3),\n    ],\n  ];\n};\n\n// eslint-disable-next-line import/prefer-default-export\nexport const accumulatedTransform = (transforms: Transforms) => {\n  const matrix = transforms.reduce((acc, transform): Matrix4 => {\n    const key = Object.keys(transform)[0] as TransformName;\n    const value = (transform as Pick<Transformations, typeof key>)[key];\n    if (key === \"translateX\") {\n      return multiply4(acc, translateXMatrix(value));\n    }\n    if (key === \"translateY\") {\n      return multiply4(acc, translateYMatrix(value));\n    }\n    if (key === \"scale\") {\n      return multiply4(acc, scaleMatrix(value));\n    }\n    if (key === \"scaleX\") {\n      return multiply4(acc, scaleXMatrix(value));\n    }\n    if (key === \"scaleY\") {\n      return multiply4(acc, scaleYMatrix(value));\n    }\n    if (key === \"rotate\" || key === \"rotateZ\") {\n      return multiply4(acc, rotateZMatrix(value));\n    }\n    return exhaustiveCheck(key);\n  }, identityMatrix);\n  // https://www.w3.org/TR/css-transforms-1/#decomposing-a-2d-matrix\n  const row0x = matrix[0][0];\n  const row0y = matrix[1][0];\n  const row1x = matrix[0][1];\n  const row1y = matrix[1][1];\n  const translateX = matrix[0][3];\n  const translateY = matrix[1][3];\n  const scaleXAbs = sqrt(add(pow(row0x, 2), pow(row0y, 2)));\n  const scaleYAbs = sqrt(add(pow(row1x, 2), pow(row1y, 2)));\n  const determinant = sub(multiply(row0x, row1y), multiply(row0y, row1x));\n  const scaleX = multiply(\n    cond(and(lessThan(determinant, 0), lessThan(row0x, row1y)), -1, 1),\n    scaleXAbs\n  );\n  const scaleY = multiply(\n    cond(and(lessThan(determinant, 0), greaterOrEq(row0x, row1y)), -1, 1),\n    scaleYAbs\n  );\n  const row0y1 = divide(row0y, scaleX);\n  const row0x1 = divide(row0x, scaleX);\n  const rotateZ = atan(divide(row0y1, row0x1));\n  const scale = cond(eq(scaleX, scaleY), scaleX, 1);\n  return {\n    translateX,\n    translateY,\n    scaleX,\n    scaleY,\n    scale,\n    rotateZ,\n    rotate: rotateZ,\n  };\n};\n"]}